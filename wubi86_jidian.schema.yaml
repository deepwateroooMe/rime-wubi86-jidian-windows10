# Rime schema settings
# encoding: utf-8

schema:
  schema_id: wubi86_jidian
  name: "极点五笔86"
  version: "1.0"
  author:
    - 创始人 王永民先生
  description: |
    五笔字形 86 极点极爽版，方案由 KyleBing 修改 - 2019年11月08日 10:26
  dependencies:
#    - pinyin_simp

switches:
  - name: ascii_mode
    reset: 0
    states: [ 中文, 英文 ]
  - name: zh_trad
    reset: 0    # 初始状态为 0: 简 -> 简 1: 简 -> 繁
    states: [ 简体, 繁体 ]
  - name: full_shape
    states: [ 半角, 全角 ]
  - name: extended_charset
    states: [ 常用, 扩展 ]
  - name: ascii_punct
    states: [ 。，, ．， ]

engine:
  processors:
    - ascii_composer
    - recognizer
    - key_binder
    - speller
    - punctuator
    - selector
    - navigator
    - express_editor
  segmentors:
    - ascii_segmentor
    - matcher
    - abc_segmentor
    - punct_segmentor
    - fallback_segmentor
  translators:
    - punct_translator
    - reverse_lookup_translator
    - table_translator
    - lua_translator@date_translator # 自定义系统变量输出
    - lua_translator@calculator # 计算器：二元运算，coco 开头，如 coco56*34 coco24/1024
  filters:
    - simplifier@tradition
#    - lua_filter@single_char_first_filter # 单字优先
#    - lua_filter@single_char_only # 纯单字


# 自动造词功能：参阅： https://github.com/KyleBing/rime-wubi86-jidian#6-%E5%BC%80%E5%90%AF%E8%87%AA%E5%8A%A8%E9%80%A0%E8%AF%8D
# 开启五笔模式下的自动造词功能
# 默认是没有开启的，如果想开启需要手动编辑 wubi86_jidian.schema.yaml 文件，里面也有相关的说明
# 除了把文件中自动造词部分都设为 true 之外，还需要把 speller 那段的都注释掉，因为那里都是直接上屏的，直接上屏就无法造词了，所以需要注释掉。
# 造词功能是这样的，在输入一次之后，输入法会记住这个连词，打的时候后面会有图标指示，下次再输入这个词的时候，就会固定这个词，并在用户词典中新增这个词的词条。
# ————————————————
# 版权声明：本文为CSDN博主「十月ooOO」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
# 原文链接：https://blog.csdn.net/KimBing/article/details/88042101


# 我弄清楚情况了，现在对这部分代码做个分析：
# AutoSelectAtMaxCodeLength() 处理：达到最大码长后，继续输入则顶字上屏。
# 只须设有 max_code_length:，处於未转换状态的输入码就当不超过最大码长。
# 未开启 auto_select: 亦适用。
# AutoSelectUniqueCandidate() 处理：惟一候选自动上屏。
# 须开启 auto_select: 及 translator/enable_completion:，后者保证尚有后续更长编码时，候选不惟一；须关闭 translator/enable_sentence:。
# 这又分：
# 有约束条件：设 max_code_length: 或 auto_select_pattern:，仅当满足该约束时自动上屏。
# 无约束：遇惟一候选则立即上屏。
# AutoSelectPreviousMatch() 处理：开启自动上屏时，连书若干字，若出现无候选的状态则按正向最大匹配的方式「断字」，将本次输入重新解释为：之前已完成的字加上一段新开始的编码。其效果类似於顶字上屏，但不是以「超过最大码长」为条件，而是以「无法作为单一编码继续完成转换」为条件。
# 这项处理只应该用在「无约束」开启自动上屏的情况下。理由是有必要「断字」表明当前输入不满足约束条件。而现有代码并未区分有无约束条件，这是 BUG。会导致在输入「错误」编码的情况下，绕过约束条件而发生自动上屏。
# speller/auto_select_pattern : '.{4}' 实在是 speller/max_code_length: 4 的功能等价（且开销略大的）写法。应当在 AutoSelectPreviousMatch() 处理前加上「有无约束条件」的判断。


speller:
  max_code_length: 4                    # 四码上屏
  auto_select: false                     # 四码唯一时，自动上屏
  # auto_clear: max_length                # 空码时自动清空
  auto_select_unique_candidate: false     # 无重码时自动上屏: 这个功能已经被弃用了，不起作用

translator:
  dictionary: wubi86_jidian             # 翻译器将调取此字典文件
  enable_charset_filter: true           # 开启字符集过滤
  enable_completion: true               # 是否显示编码未输入完整的词条

  enable_sentence: true               # 句子输入模式
  enable_user_dict: true              # 是否开启用户词典（用户词典记录动态字词频，用户词）
  enable_encoder: true
  encode_commit_history: true          # 是否对已上屏词自动成词（仅 table_translator 有效）
  preedit_format:                       # 上屏码自定义
#    - xform/.+//
  comment_format:                       # 提示码自定义
    # - xform/.+//                        # 当前默认不提示编码，消除所有候选词后的提示码 ,让它能够提示编码


# 简入繁出 通过 OpenCC 支持 github地址：https://github.com/BYVoid/OpenCC
# 已集成在输入法程序中，在输入法程序目录的 opencc 目录下
# 输入法程序中使用 OpenCC 简转繁的过程是这样：
# 1. 先从简转繁体
# 2. 如果配置了台湾繁体，就会将上一步生成的繁体进一步处理
# 3. 根据这个文件：https://github.com/BYVoid/OpenCC/blob/master/data/dictionary/TWVariants.txt 把台湾与正常繁体不同的地方转成台湾版本的字，比如 “床”

tradition:
  #  opencc_config: s2t.json  # 简 -> 繁
  opencc_config: s2hk.json  # 繁 -> 香港
  #  opencc_config: t2s.json   # 繁 -> 简
  #  opencc_config: t2tw.json  # 繁 -> 台湾
  #  opencc_config: t2hk.json  # 繁 -> 香港
  #  opencc_config: s2tw.json  # 簡 -> 臺灣標準
  #  opencc_config: s2twp.json  # 簡 -> 臺灣片語
  option_name: zh_trad

reverse_lookup:
  dictionary: pinyin_simp  # 反查使用的拼音词库
  prefix: "z"              # 反查前缀，以它为起点
  suffix: "'"              # 反查后缀，以它为结点
  tips: [拼音]              # 反查时的提示信息

  preedit_format:
    - xform/([nl])v/$1ü/
    - xform/([nl])ue/$1üe/
    - xform/([jqxy])v/$1u/
punctuator:
  import_preset: default
#  import_preset: symbols
# 开始快捷输入符号功能，前面留两个空格
# 对应需要将下面 recognizer -> patterns 下面的 punct 字段的注释去掉

key_binder:
  import_preset: default

recognizer:
  import_preset: default
  patterns:
#    punct: "^/([0-9]+[a-z]*|[a-z]+)$" # 注意前方需要有4个空格，跟下面对齐
    reverse_lookup: "^z[a-z]*'?$" # 反查词条的正则
    calculator: "^coco.*$" # 计算器
